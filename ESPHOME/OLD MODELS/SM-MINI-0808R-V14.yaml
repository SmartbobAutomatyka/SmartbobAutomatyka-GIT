# NAZWA STEROWNIKA
esphome:
  name: sm-mini-0808R
  friendly_name: sm-mini-0808R
  on_boot:
    then:
      # read the RTC time once when the system boots
      ds1307.read_time:


api:
  encryption:
    key: !secret encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

# RODZAJ PROCESORA
esp32:
  board: esp32dev
  framework:
    type: arduino

# LOGOWANIE
logger:
  level: DEBUG

# KOMNUNIKACJA UART-RS485 - USTAW SWOJĄ CZESTOLIWOŚĆ
uart:
  - id: modbus_uart
    rx_pin: 35
    tx_pin: 1
    baud_rate: 19200
    stop_bits: 1
    data_bits: 8
    parity: NONE
    debug:
      direction: BOTH

one_wire:
  - platform: gpio
    pin: 3

# KONFIGURACJA CZUJNIKÓW I PERYFERIÓW
sensor:
  - platform: dallas_temp
    name: temperature
    update_interval: 120s

  # CZUJNIK POMIARU TEMPERATURY PCB 1 - USTAW KTÓRE OBWODY MAJĄ BYĆ WYŁĄCZONE W PRZYPADKU PRZEKROCZENIA TEMPERATURY
  - platform: tmp102
    name: "Temperatura PCB 1"
    address: 0x48
    id: temp_1
    update_interval: 15s

  # CZUJNIK POMIARU TEMPERATURY PCB 1 - USTAW KTÓRE OBWODY MAJĄ BYĆ WYŁĄCZONE W PRZYPADKU PRZEKROCZENIA TEMPERATURY
  - platform: tmp102
    name: "Temperatura PCB 2"
    address: 0x49
    id: temp_2
    update_interval: 15s

  # POMIAR CZASU OD OSTATNIEGO URUCHOMIENIA
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    internal: true
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
  
  # POMIAR CZASU OD OSTATNIEGO URUCHOMIENIA
  - platform: uptime
    name: "Uptime Sensor M03"
    id: upt_M03
    internal: true

# KOFNIFGURACJA 1WIRE
button:
  - platform: restart
    name: "ESP Restart"
#KONFIGRUACJA ZEGARA CZASU RZECZYWISTEGO
time:
  - platform: ds1307
    id: ds1307_time
  - platform: sntp
    id: homeassistant_time
    timezone: Europe/Sofia
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
    on_time_sync:
      then:
        # ... and update the RTC when the synchronization was successful
        ds1307.write_time:

# KONFIGURACJA LAN LUB WIFI
#wifi:
  #ssid: "12345678"  
  #password: "12345678"
  #
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  id: eth
  manual_ip:
    static_ip: 192.168.68.120
    gateway: 192.168.68.1
    subnet: 255.255.255.0
    dns1 : 8.8.8.8
    dns2 : 8.8.4.4
#ethernet:
#  type: LAN8720
#  mdc_pin: GPIO23
# mdio_pin: GPIO18
#  clk_mode: GPIO17_OUT
#  phy_addr: 1
#  id: eth
#  manual_ip:
#    static_ip: 192.168.68.120
#    gateway: 192.168.68.1
#    subnet: 255.255.255.0
#    dns1: 8.8.8.8
#    dns2: 8.8.4.4


# KONFIGURACJA I2C 
i2c:
   - id: bus_a
     sda: 5
     scl: 15
     scan: true
     frequency: 400kHz

# KONFIGURACJA MCP23017
mcp23017:
  - id: 'mcp23017_hub_1' 
    address: 0x20



switch:
#KONFIGURACJA WYJŚĆ 
  - platform: gpio
    name: "REALY-01"
    id: relay_01
    pin:
      number: GPIO32
      inverted: False
  
  - platform: gpio
    name: "REALY-02"
    id: relay_02
    pin:
      number: GPIO33
      inverted: False
    
  - platform: gpio
    name: "REALY-03"
    id: relay_03
    pin:
      number: GPIO16
      inverted: False

  - platform: gpio
    name: "REALY-04"
    id: relay_04
    pin:
      number: GPIO12
      inverted: False

  - platform: gpio
    name: "REALY-05"
    id: relay_05
    pin:
      number: GPIO13
      inverted: False

  - platform: gpio
    name: "REALY-06"
    id: relay_06
    pin:
      number: GPIO2
      inverted: False

  - platform: gpio
    name: "REALY-07"
    id: relay_07
    pin:
      number: GPIO4
      inverted: False
        
  - platform: gpio
    name: "REALY-08"
    id: relay_08
    pin:
      number: GPIO14
      inverted: True

# KONFIGURACJA WEJŚĆ
binary_sensor:
                    
  #modbus
  - platform: gpio
    name: "INPUT-01"
    id: input_01
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 7
      mode:
        input: true
        pullup: false
      inverted: true

  - platform: gpio
    name: "INPUT-02"
    id: input_02
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 6
      mode:
        input: true
        pullup: false
      inverted: true

  - platform: gpio
    name: "INPUT-03"
    id: input_03
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 5
      mode:
        input: true
        pullup: false
      inverted: true

  - platform: gpio
    name: "INPUT-04"
    id: input_04
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 4
      mode:
        input: true
        pullup: false
      inverted: true
    on_press:
       then:
        - switch.toggle: relay_04
  - platform: gpio
    name: "INPUT-05"
    id: input_05
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 3
      mode:
        input: true
        pullup: false
      inverted: true

  - platform: gpio
    name: "INPUT-06"
    id: input_06
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 2
      mode:
        input: true
        pullup: false
      inverted: true

  - platform: gpio
    name: "INPUT-07"
    id: input_07
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 1
      mode:
        input: true
        pullup: false
      inverted: true

  - platform: gpio
    name: "INPUT-08"
    id: input_08
    pin:
      mcp23xxx: mcp23017_hub_1
      number: 0
      mode:
        input: true
        pullup: false
      inverted: true


# AKTYWACJA WEB SERWERA
web_server:
  port: 80  


# USTAWIENIA ELEMENTÓW TEKSTOWYCH
text_sensor:
  - platform: template
    name: "ESP32-M03 Uptime"
    id: uptime_human
    icon: mdi:clock-start
  - platform: template
    name: "IP"
    id: ip_address
    entity_category: diagnostic
    icon: "mdi:ip-network"
    lambda: return { id(eth).get_ip_addresses()[0].str() };
    update_interval: 10s

#USTAWENIA CZCIONEK
font:
- file: 'arial.ttf'
  id: font1
  size: 12

- file: 'materialdesignicons-webfont.ttf'
  id: materialdesignicons
  size: 15
  glyphs: [
      "\U000F0317", # lan
      "\U000F04A2", # signal
      "\U000F05A9", # wifi
      "\U000F048B", # server
      "\U000F0FA9", # clock
      "\U000F050F" # thermometer
      ]

# USTAWIENIA EKRANU
display:
  - platform: ssd1306_i2c
    model: "SSD1306_128X64"
    lambda: |-
      int seconds = round(id(upt_M03).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      it.print(0, 0, id(materialdesignicons), TextAlign::LEFT, "\U000F0317");
      it.printf(18, 1,id(font1), "%s", id(ip_address).state.c_str());
      it.print(0, 16, id(materialdesignicons), TextAlign::LEFT, "\U000F0FA9");
      it.printf(18,17,id(font1),"%d dni, %02d godzin",days,hours);
      it.print(0, 32, id(materialdesignicons), TextAlign::LEFT, "\U000F048B");
      it.printf(18, 33, id(font1), "SM-MINI-0808R"); 
      it.print(0, 48, id(materialdesignicons), TextAlign::LEFT, "\U000F050F");
      it.printf(18, 49, id(font1), "%.1f°, %.1f°", id(temp_1).state, id(temp_2).state); 
      